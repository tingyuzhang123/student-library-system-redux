{"ast":null,"code":"var _jsxFileName = \"/Users/zhangtingyu/booksystem-redux/student-library-system-redux/src/bookList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createBookSubmitAction } from './bookSystem/systemReducer/actionsCreator';\nexport class BookLists extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temBookNumbers: {}\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.selectedStudent !== state.selectedStudent) {\n      return {\n        selectedStudent: props.selectedStudent,\n        temBookNumbers: {}\n      };\n    }\n\n    return null;\n  }\n  /*selectedBookList = event => {\n    let { studentBookList, bookNumbers } = this.state;\n    Object.keys(bookNumbers).map(key => {\n      if (event.target.value === key && event.target.checked === true) {\n        studentBookList.tempBooks[key] = true;\n      } else if (event.target.value === key && event.target.checked === false) {\n        studentBookList.tempBooks[\"book5\"] = false;\n      }\n      this.setState({ studentBookList });\n      this.props.onBookChanged(studentBookList);\n    });\n  };\n  */\n\n\n  render() {\n    let temBookNumbers = this.state.temBookNumbers;\n    const _this$props = this.props,\n          selectedStudent = _this$props.selectedStudent,\n          onBookChangedRedux = _this$props.onBookChangedRedux,\n          bookNumbers = _this$props.bookNumbers,\n          studentBorrowedBooks = _this$props.studentBorrowedBooks;\n    /*const calculateBookNumbersFromSelectedStu = (\n       bookStatus,\n       temBookNumbers,\n       bookNumbers\n     ) => {\n       let x = bookNumbers;\n       if (bookStatus.rentBooks !== undefined) {\n         return Object.keys(bookStatus.rentBooks).map(key => {\n           if (bookStatus.rentBooks[key] === true) {\n             return x[key]--, (temBookNumbers[key] = x[key]);\n           }\n         });\n       } else {\n         temBookNumbers = bookNumbers;\n       }\n     };\n      temBookNumbers = calculateBookNumbersFromSelectedStu(\n       bookStatus,\n       temBookNumbers,\n       bookNumbers\n     );\n    */\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" Book List\"), Object.keys(bookNumbers).map(bookName => {\n      if (!selectedStudent[bookName]) {\n        return React.createElement(\"div\", {\n          key: bookName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: bookName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, bookName, \" : \", bookNumbers[bookName]), React.createElement(\"input\", {\n          type: \"checkbox\",\n          value: bookName,\n          id: bookName,\n          checked: temBookNumbers[bookName],\n          disabled: bookNumbers[bookName] <= 0 || studentBorrowedBooks[bookName],\n          onChange: () => {\n            temBookNumbers[bookName] = !temBookNumbers[bookName];\n            this.setState({\n              temBookNumbers\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      }\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        onBookChangedRedux(temBookNumbers);\n        this.setState({\n          tempBookNumbers: {}\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedStudent: state.selectedStudent,\n    bookNumbers: state.bookNumbers,\n    studentBorrowedBooks: state.student[selectedStudent]\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onBookChangedRedux: tempBookNumbers => {\n      dispatch(createBookSubmitAction(tempBookNumbers));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);","map":{"version":3,"sources":["/Users/zhangtingyu/booksystem-redux/student-library-system-redux/src/bookList.js"],"names":["React","connect","createBookSubmitAction","BookLists","Component","constructor","props","state","temBookNumbers","getDerivedStateFromProps","selectedStudent","render","onBookChangedRedux","bookNumbers","studentBorrowedBooks","Object","keys","map","bookName","setState","tempBookNumbers","mapStateToProps","student","mapDispatchToProps","dispatch","BookList"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {createBookSubmitAction} from './bookSystem/systemReducer/actionsCreator';\n\nexport class BookLists extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temBookNumbers: {}\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (props.selectedStudent !== state.selectedStudent) {\n      return {\n        selectedStudent: props.selectedStudent,\n        temBookNumbers: {}\n      };\n    }\n\n    return null;\n  }\n  /*selectedBookList = event => {\n    let { studentBookList, bookNumbers } = this.state;\n    Object.keys(bookNumbers).map(key => {\n      if (event.target.value === key && event.target.checked === true) {\n        studentBookList.tempBooks[key] = true;\n      } else if (event.target.value === key && event.target.checked === false) {\n        studentBookList.tempBooks[\"book5\"] = false;\n      }\n      this.setState({ studentBookList });\n      this.props.onBookChanged(studentBookList);\n    });\n  };\n*/\n  render() {\n    let { temBookNumbers } = this.state;\n    const { selectedStudent, onBookChangedRedux, bookNumbers,studentBorrowedBooks } = this.props;\n   /*const calculateBookNumbersFromSelectedStu = (\n      bookStatus,\n      temBookNumbers,\n      bookNumbers\n    ) => {\n      let x = bookNumbers;\n      if (bookStatus.rentBooks !== undefined) {\n        return Object.keys(bookStatus.rentBooks).map(key => {\n          if (bookStatus.rentBooks[key] === true) {\n            return x[key]--, (temBookNumbers[key] = x[key]);\n          }\n        });\n      } else {\n        temBookNumbers = bookNumbers;\n      }\n    };\n\n    temBookNumbers = calculateBookNumbersFromSelectedStu(\n      bookStatus,\n      temBookNumbers,\n      bookNumbers\n    );\n*/\n    return (\n      <div>\n        <h3> Book List</h3>\n        \n          {Object.keys(bookNumbers).map(bookName => {\n            if (\n              !selectedStudent[bookName]\n            ) {\n              return (\n                  <div key={bookName}>\n                  <label htmlFor={bookName}>\n                    {bookName} : {bookNumbers[bookName]}\n                  </label>\n                  <input\n                    type=\"checkbox\"\n                    value={bookName}\n                    id={bookName}\n                    checked={temBookNumbers[bookName]}\n                    disabled={bookNumbers[bookName] <= 0 || studentBorrowedBooks[bookName]}\n                    onChange={() => {\n                      temBookNumbers[bookName] = !temBookNumbers[bookName];\n                      this.setState({ temBookNumbers });\n                  }}\n                  />\n                 </div>\n\n              );\n            }\n          })}\n\n        <button\n          onClick={() => {\n             onBookChangedRedux(temBookNumbers);\n             this.setState({ tempBookNumbers: {} });\n              }}>\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps=(state)=>{\n    return{\n        selectedStudent: state.selectedStudent,\n        bookNumbers: state.bookNumbers,\n        studentBorrowedBooks:state.student[selectedStudent]\n\n\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onBookChangedRedux: (tempBookNumbers) => { dispatch(createBookSubmitAction(tempBookNumbers)) },\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);"]},"metadata":{},"sourceType":"module"}